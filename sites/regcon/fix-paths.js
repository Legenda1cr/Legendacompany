const fs = require('fs');
const path = require('path');

// –ü–∞–ø–∫–∞, –≥–¥–µ –ª–µ–∂–∏—Ç src
const baseDir = path.join(__dirname, 'src');

function processFile(filePath) {
  const ext = path.extname(filePath);
  if (!['.html', '.css', '.js'].includes(ext)) return;

  const backupPath = filePath + '.bak';
  fs.copyFileSync(filePath, backupPath);

  let content = fs.readFileSync(filePath, 'utf8');

  // –ó–∞–º–µ–Ω–∞ –ø—É—Ç–µ–π –∫ CSS
  content = content.replace(/href="([^"]+\.css)"/g, (match, p1) => {
    if (p1.startsWith('http') || p1.startsWith('../styles/')) return match;
    return `href="../styles/${p1.replace(/^.*[\\/]/, '')}"`;
  });

  // –ó–∞–º–µ–Ω–∞ –ø—É—Ç–µ–π –∫ JS
  content = content.replace(/src="([^"]+\.js)"/g, (match, p1) => {
    if (p1.startsWith('http') || p1.startsWith('../scripts/')) return match;
    return `src="../scripts/${p1.replace(/^.*[\\/]/, '')}"`;
  });

  // –ó–∞–º–µ–Ω–∞ –ø—É—Ç–µ–π –∫ IMG, MP4
  content = content.replace(/src="\.\/([^"]+\.(png|jpg|jpeg|gif|mp4))"/g, (match, p1) => {
    return `src="../assets/${p1}"`;
  });

  // –ó–∞–º–µ–Ω–∞ url() –≤ CSS
  content = content.replace(/url\(['"]?([^'")]+\.((png|jpg|jpeg|gif|mp4)))['"]?\)/g, (match, p1) => {
    if (p1.startsWith('http') || p1.startsWith('../assets/')) return match;
    return `url('../assets/${p1.replace(/^.*[\\/]/, '')}')`;
  });

  // üö© –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ–Ω—É –ø—É—Ç–µ–π –∫ HTML
  content = content.replace(/href="([^"]+\.html)"/g, (match, p1) => {
    if (p1.startsWith('http') || p1.startsWith('pages/')) return match;
    return `href="pages/${p1}"`;
  });

  fs.writeFileSync(filePath, content, 'utf8');
  console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${filePath}`);
}

function walk(dir) {
  fs.readdirSync(dir).forEach(file => {
    const fullPath = path.join(dir, file);
    if (fs.statSync(fullPath).isDirectory()) {
      walk(fullPath);
    } else {
      processFile(fullPath);
    }
  });
}

walk(baseDir);
console.log('üéâ –í—Å–µ –ø—É—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .bak —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
